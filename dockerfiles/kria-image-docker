#
# Wild-Sight-AI
# Smart Following Camera with Animal Detection
#   for Kria KR260 Board
#
# Created by: Matjaz Zibert S59MZ - August 2025
#
# Dockerfile for Kria runtime image
#
#
# Based on Vitis-AI 3.5 
#   - VART 3.5.0
#   - XIR 202310.2.15.225
#   - VVAS 3.0
#   - XRT 2.15
#   - OpenCV 4.6
#   - Protobuf 3.21.3 
#
# Required:
#   - zocl v2.15 kernel module on target
#   - DPU IP v4.0 on FPGA
#
# Design based on Kria KV260 Smartcam Demo App by AMD,
#    upgraded for using Vitis AI 3.5
#
#
# Hackster.io Project link:
#     https://www.hackster.io/matjaz4/wildsight-ai-real-time-human-wildlife-conflict-detection-ff65fa
#



# build the needed OpenCV 4.6 libraries from sources (if not exist already)
FROM ubuntu:22.04 AS opencv

RUN mkdir -p /out/zip

# comment out this line to build this library file from source
COPY /libs/opencv406.zip /out/zip

RUN apt update && apt-get install --yes --no-install-recommends \
        build-essential cmake git ca-certificates \
        libjpeg-dev libpng-dev libtiff-dev libwebp-dev \
        libopenjp2-7-dev libtbb-dev zlib1g-dev \
        zip unzip

RUN mkdir -p /opt/src 

RUN mkdir -p /out/install
RUN mkdir -p /out/lib/aarch64-linux-gnu

WORKDIR /opt/src

# get sources (inside your KR260 docker)
RUN git clone --branch 4.6.0 --depth 1 https://github.com/opencv/opencv.git
RUN git clone --branch 4.6.0 --depth 1 https://github.com/opencv/opencv_contrib.git

RUN mkdir -p opencv/build
WORKDIR /opt/src/opencv/build

RUN if [ -f /out/zip/opencv406.zip ]; then \
      echo "Using local OpenCV 4.6 file" ; \
    else \
      echo "Building OpenCV 4.6 from sources..." && \
      \
      cmake -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=/opt/opencv-4.6 \
          -DOPENCV_GENERATE_PKGCONFIG=ON \
          -DBUILD_LIST=core,imgproc,imgcodecs,dnn,highgui,video \
          -DWITH_TBB=ON -DWITH_IPP=OFF -DWITH_CUDA=OFF -DWITH_GTK=OFF \
          -DOPENCV_EXTRA_MODULES_PATH=/opt/src/opencv_contrib/modules \
          .. && \
      \
      make -j$(nproc) && make DESTDIR=/out/install install && \
      \
      cp /out/install/opt/opencv-4.6/lib/libopencv_core.so.406 /out/lib/aarch64-linux-gnu/ && \
      cp /out/install/opt/opencv-4.6/lib/libopencv_imgproc.so.406 /out/lib/aarch64-linux-gnu/ && \
      cp /out/install/opt/opencv-4.6/lib/libopencv_imgcodecs.so.406 /out/lib/aarch64-linux-gnu/ && \
      cp /out/install/opt/opencv-4.6/lib/libopencv_dnn.so.406 /out/lib/aarch64-linux-gnu/ && \
      \
      cd /out && zip -r zip/opencv406.zip lib/* ;\
   fi

WORKDIR /out
RUN rm -rf /opt/src 



# build the main kria runtime image
FROM ubuntu:22.04 AS image

LABEL Description="Docker run time image for kria boards" Vendor="AMD-Xilinx"
ARG BUILD_DATE
ARG BUILD_VERSION
LABEL org.label-schema.schema-version="1.0"

# BUILD_DATE should be in "2016-04-12T23:20:50.52Z" format
LABEL org.label-schema.build-date=$BUILD_DATE
#BUILD_VERSION should match with source code tag.
LABEL org.label-schema.version=$BUILD_VERSION

COPY scripts/bashrc /etc/bash.bashrc
RUN chmod a+rwx /etc/bash.bashrc
RUN echo $BUILD_DATE > /etc/BUILD_DATE.txt
ADD scripts/welcome.sh /etc/

# to avoid configuring tzdata for opencv
ARG DEBIAN_FRONTEND=noninteractive

# Add pgRouting launchpad repository
RUN apt-get update ; \
    apt-get install -y software-properties-common ; \
    add-apt-repository -y ppa:xilinx-apps/ppa ; \
    add-apt-repository -y ppa:ubuntu-xilinx/sdk ; \
    add-apt-repository -y ppa:ubuntu-xilinx/gstreamer ; \
    apt-get update ; 

RUN apt-get install --yes --no-install-recommends \
    bash \
    vim \
    wget \
    curl \
    ca-certificates \
    openssh-client \
    unzip \
    git \
    sudo \
    tree \
    cmake \
    build-essential \
    meson \
    ninja-build \
    libjson-glib-dev \
    libyaml-cpp-dev \
    libglib2.0-dev \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libwebp-dev \
    libopenjp2-7-dev \
    libtbb-dev \
    zlib1g-dev \
    v4l-utils \
    alsa-base \
    alsa-utils \
    pulseaudio \
    gstreamer1.0-tools \
    gstreamer1.0-plugins-base \
    gstreamer1.0-plugins-good \
    gstreamer1.0-x \
    gstreamer1.0-plugins-bad \
    python3-pip \
    python3-dev \
    gstreamer1.0-omx-generic \
    libxilinx-vcu-omx1 \
    xilinx-vcu-omx-utils \
    gstreamer-xilinx1.0-omx-zynqmp \
    libjansson4 \
    libjson-glib-dev \
    net-tools \
    gawk \
    gstreamer1.0-alsa \
    libdrm2 \
    libdrm-common \
    libdrm-tests \
    libdrm-dev \
    libdrm-etnaviv1 \
    libgstreamer1.0-0 \
    libgstreamer-plugins-base1.0-0 \
    libgstreamer-plugins-good1.0-0 \
    libgstreamer-plugins-bad1.0-0 \
    gstreamer1.0-plugins-base-apps \
    gstreamer1.0-pulseaudio \
    gstreamer1.0-opencv \
    libv4l2rds0 \
    libv4l-0 \
    libv4lconvert0 \
    libgstreamer-gl1.0-0 \
    libgstreamer-opencv1.0-0 \
    gcc \
    libgstreamer-plugins-base1.0-dev \
    gstreamer1.0-rtsp libgstrtspserver-1.0-0 \
    gir1.2-gst-rtsp-server-1.0 \
    gst-perf \
    libasound-dev \
    libgstreamer1.0-dev \
    libopencv-dev \
    libgoogle-glog-dev \
    libjansson-dev \
    libgstrtspserver-1.0-dev \
    libgstreamer1.0-dev \
    libboost-serialization1.74.0 \
    libboost-serialization1.74-dev \
    libzmq3-dev \
    libgstreamer-plugins-good1.0-dev \
    libgstreamer-plugins-base1.0-dev \
    libgstreamer-plugins-bad1.0-dev \
    libopencv-dev \
    libxilinx-vcu-omx-dev \
    libne10-dev \
    autoconf \
    automake \
    libtool \
    make \
    g++ \
  && rm -rf /var/lib/apt/lists/*

# install NumPy
RUN pip install numpy

# install Vitis-AI 3.5
RUN wget -O vai3.5_kr260.zip https://www.xilinx.com/bin/public/openDownload?filename=vai3.5_kr260.zip
RUN unzip vai3.5_kr260.zip

# Installing VART packages
RUN dpkg -i --force-overwrite vai3.5_kr260/target/runtime_deb/libunilog*.deb
RUN dpkg -i --force-overwrite vai3.5_kr260/target/runtime_deb/libxir*.deb
RUN dpkg -i --force-overwrite vai3.5_kr260/target/runtime_deb/libtarge*.deb
RUN dpkg -i --force-overwrite vai3.5_kr260/target/runtime_deb/libvart*.deb
RUN dpkg -i --force-overwrite vai3.5_kr260/target/runtime_deb/libvitis*.deb

# Copy libraries
RUN tar -xzf vai3.5_kr260/target/lack_lib.tar.gz -C vai3.5_kr260/target/
RUN cp vai3.5_kr260/target/lack_lib/* /usr/lib

RUN cp vai3.5_kr260/xbutil_tool/xbutil2 /usr/bin/xbutil
RUN chmod +x /usr/bin/xbutil

RUN rm -rf vai3.5_kr260*


# install dfx library needed ror xdputil tools
COPY libs/libdfx.so.1.0 /usr/lib


# install XRT headers 202310.2.15.225
RUN git clone --depth=1 --branch 202310.2.15.225 https://github.com/Xilinx/XRT.git
RUN mkdir -p /usr/include/xrt

RUN cp -r /XRT/src/runtime_src/core/include/* /usr/include/
RUN cp -r /XRT/src/runtime_src/core/include/* /usr/include/xrt/
RUN cp -r /XRT/src/runtime_src/core/include/xrt /usr/include/xrt/

RUN cp -r /XRT/src/runtime_src/core/include/experimental /usr/include/xrt/
RUN cp -r /XRT/src/include/1_2/CL/* /usr/include/xrt/

RUN rm -rf XRT


# configure pkg
ENV LIBDIR=/usr/lib/aarch64-linux-gnu
ENV INCLUDEDIR=/usr/include;/usr/include/xrt

RUN install -d $LIBDIR/pkgconfig

RUN cat >/usr/lib/aarch64-linux-gnu/pkgconfig/xrt.pc <<'EOF'
prefix=/usr
exec_prefix=${prefix}
libdir=${exec_prefix}/lib
includedir=${prefix}/include

Name: xrt
Description: Xilinx Runtime (userspace)
Version: 2.15.0
Libs: -L${libdir} -lxrt_core -lxrt_coreutil -lxrt++
Cflags: -I${includedir}
EOF

RUN cat > $LIBDIR/pkgconfig/xir.pc <<'EOF'
prefix=/usr
libdir=${prefix}/lib/aarch64-linux-gnu
includedir=${prefix}/include
Name: xir
Description: Xilinx IR (Vitis AI 3.5)
Version: 3.5.0
Libs: -L${libdir} -lxir
Cflags: -I${includedir}
EOF

RUN cat > $LIBDIR/pkgconfig/vart.pc <<'EOF'
prefix=/usr
libdir=${prefix}/lib/aarch64-linux-gnu
includedir=${prefix}/include
Name: vart
Description: Vitis AI Runtime (3.5)
Version: 3.5.0
Libs: -L${libdir} -lvart-runner
Cflags: -I${includedir}
EOF


ENV PKG_CONFIG_PATH=$LIBDIR/pkgconfig

ENV C_INCLUDE_PATH=/usr/include/ne10
ENV CPLUS_INCLUDE_PATH=/usr/include/ne10

ENV LD_LIBRARY_PATH=/usr/lib:/usr/local/lib
ENV PYTHONPATH=/usr/lib/python3.10/site-packages

ENV GST_PLUGIN_PATH=/usr/lib/aarch64-linux-gnu/gstreamer-1.0


# Install protobuf 3.21.3 
RUN curl -L https://github.com/protocolbuffers/protobuf/archive/refs/tags/v3.21.3.tar.gz -o protobuf-3.21.3.tar.gz  \
   && tar xzf protobuf-3.21.3.tar.gz 

RUN cd protobuf-3.21.3 \
   && ./autogen.sh \
   && ./configure --prefix=/usr/local \
   && make -j"$(nproc)" \
   && make install \
   && ldconfig \
   && cd .. \
   && rm -rf protobuf-3.21.3 protobuf-3.21.3.tar.gz


# Install the missing OpenCV 4.6 libraries, needed for vvas_xinfer 
COPY --from=opencv /out/zip/opencv406.zip /
RUN unzip opencv406.zip && rm opencv406.zip

RUN echo "/lib/aarch64-linux-gnu" >/etc/ld.so.conf.d/opencv-4.6.conf && ldconfig

# clean gstreamer registry
RUN rm -f ~/.cache/gstreamer-1.0/registry.* 2>/dev/null


# install VVAS 3.0
RUN git clone --branch VVAS_REL_v3.0 --recurse-submodules https://github.com/Xilinx/VVAS.git

RUN cat >/usr/include/version.h <<'EOF'
#pragma once
// XRT 2023.1 (2.15.0)
#define XRT_VERSION_MAJOR 2
#define XRT_VERSION_MINOR 15
#define XRT_VERSION_PATCH 0
#define XRT_VERSION_CODE  ((XRT_VERSION_MAJOR << 16) | (XRT_VERSION_MINOR << 8) | (XRT_VERSION_PATCH))

// helpers used by headers
#define XRT_MAJOR(x)  (((x) >> 16) & 0xff)
#define XRT_MINOR(x)  (((x) >> 8)  & 0xff)
#define XRT_PATCH(x)  ((x) & 0xff)

// optional: a string if anything prints it
#define XRT_VERSION_STRING "2.15.0"
EOF

# build vvas-core
RUN cd /VVAS/vvas-core \
   && rm -rf build \
   && meson setup build --prefix=/usr \
   && ninja -C build \
   && ninja -C build install

# build vvas-utils
RUN cd /VVAS/vvas-utils \
   && rm -rf build \
   && meson setup build --prefix=/usr \
   && ninja -C build \
   && ninja -C build install

# build vvas-gst-plugins
RUN cd /VVAS/vvas-gst-plugins \
   && rm -rf build \
   && meson setup build --prefix=/usr \
   && ninja -C build \
   && ninja -C build install 

# build accel-sw-libs
RUN cd /VVAS/vvas-accel-sw-libs \
   && rm -rf build \
   && meson setup build --prefix=/usr \
   && ninja -C build \
   && ninja -C build install

RUN rm -rf /VVAS 

